// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/actuator/actuator.proto

package crocodile_srv_actuator

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Actuator service

type ActuatorService interface {
	// 创建新的执行器
	CreateActuator(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error)
	// 删除执行器
	DeleteActuator(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error)
	// 修改执行器
	ChangeActuator(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error)
	// 获取执行器
	GetActuator(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error)
	// 获取全部已经创建的
	GetAllExecutorIP(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error)
}

type actuatorService struct {
	c    client.Client
	name string
}

func NewActuatorService(name string, c client.Client) ActuatorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "crocodile.srv.actuator"
	}
	return &actuatorService{
		c:    c,
		name: name,
	}
}

func (c *actuatorService) CreateActuator(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Actuator.CreateActuator", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actuatorService) DeleteActuator(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Actuator.DeleteActuator", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actuatorService) ChangeActuator(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Actuator.ChangeActuator", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actuatorService) GetActuator(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Actuator.GetActuator", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actuatorService) GetAllExecutorIP(ctx context.Context, in *Actuat, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Actuator.GetAllExecutorIP", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Actuator service

type ActuatorHandler interface {
	// 创建新的执行器
	CreateActuator(context.Context, *Actuat, *Response) error
	// 删除执行器
	DeleteActuator(context.Context, *Actuat, *Response) error
	// 修改执行器
	ChangeActuator(context.Context, *Actuat, *Response) error
	// 获取执行器
	GetActuator(context.Context, *Actuat, *Response) error
	// 获取全部已经创建的
	GetAllExecutorIP(context.Context, *Actuat, *Response) error
}

func RegisterActuatorHandler(s server.Server, hdlr ActuatorHandler, opts ...server.HandlerOption) error {
	type actuator interface {
		CreateActuator(ctx context.Context, in *Actuat, out *Response) error
		DeleteActuator(ctx context.Context, in *Actuat, out *Response) error
		ChangeActuator(ctx context.Context, in *Actuat, out *Response) error
		GetActuator(ctx context.Context, in *Actuat, out *Response) error
		GetAllExecutorIP(ctx context.Context, in *Actuat, out *Response) error
	}
	type Actuator struct {
		actuator
	}
	h := &actuatorHandler{hdlr}
	return s.Handle(s.NewHandler(&Actuator{h}, opts...))
}

type actuatorHandler struct {
	ActuatorHandler
}

func (h *actuatorHandler) CreateActuator(ctx context.Context, in *Actuat, out *Response) error {
	return h.ActuatorHandler.CreateActuator(ctx, in, out)
}

func (h *actuatorHandler) DeleteActuator(ctx context.Context, in *Actuat, out *Response) error {
	return h.ActuatorHandler.DeleteActuator(ctx, in, out)
}

func (h *actuatorHandler) ChangeActuator(ctx context.Context, in *Actuat, out *Response) error {
	return h.ActuatorHandler.ChangeActuator(ctx, in, out)
}

func (h *actuatorHandler) GetActuator(ctx context.Context, in *Actuat, out *Response) error {
	return h.ActuatorHandler.GetActuator(ctx, in, out)
}

func (h *actuatorHandler) GetAllExecutorIP(ctx context.Context, in *Actuat, out *Response) error {
	return h.ActuatorHandler.GetAllExecutorIP(ctx, in, out)
}
