// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tasklog/tasklog.proto

package crocodile_srv_tasklog

import (
	_ "crocodile/service/executor/proto/executor"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TaskLog service

type TaskLogService interface {
	CreateLog(ctx context.Context, in *SimpleLog, opts ...client.CallOption) (*Empty, error)
	// 获取日志
	GetLog(ctx context.Context, in *QueryLog, opts ...client.CallOption) (*RespLog, error)
}

type taskLogService struct {
	c    client.Client
	name string
}

func NewTaskLogService(name string, c client.Client) TaskLogService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "crocodile.srv.tasklog"
	}
	return &taskLogService{
		c:    c,
		name: name,
	}
}

func (c *taskLogService) CreateLog(ctx context.Context, in *SimpleLog, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "TaskLog.CreateLog", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLogService) GetLog(ctx context.Context, in *QueryLog, opts ...client.CallOption) (*RespLog, error) {
	req := c.c.NewRequest(c.name, "TaskLog.GetLog", in)
	out := new(RespLog)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskLog service

type TaskLogHandler interface {
	CreateLog(context.Context, *SimpleLog, *Empty) error
	// 获取日志
	GetLog(context.Context, *QueryLog, *RespLog) error
}

func RegisterTaskLogHandler(s server.Server, hdlr TaskLogHandler, opts ...server.HandlerOption) error {
	type taskLog interface {
		CreateLog(ctx context.Context, in *SimpleLog, out *Empty) error
		GetLog(ctx context.Context, in *QueryLog, out *RespLog) error
	}
	type TaskLog struct {
		taskLog
	}
	h := &taskLogHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskLog{h}, opts...))
}

type taskLogHandler struct {
	TaskLogHandler
}

func (h *taskLogHandler) CreateLog(ctx context.Context, in *SimpleLog, out *Empty) error {
	return h.TaskLogHandler.CreateLog(ctx, in, out)
}

func (h *taskLogHandler) GetLog(ctx context.Context, in *QueryLog, out *RespLog) error {
	return h.TaskLogHandler.GetLog(ctx, in, out)
}
